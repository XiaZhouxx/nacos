spring:
  application:
    name: nacos-gateway
  cloud:
    nacos:
      config:
        server-addr: 47.107.246.54:8848
        extension-configs:
          - data-id: application.yaml
            refresh: true
      discovery:
        server-addr: 47.107.246.54:8848
        ephemeral: true
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowCredentials: true
            allowedHeaders: "*"
            max_age: 3600
            allowedMethods:
              - POST
              - GET
              - OPTIONS
              - PUT
              - DELETE
              - PATCH
              - HEAD
      discovery:
        locator:
          enabled: true #启用服务发现组件使其可以采用服务名路由
      routes:
      ## 一组route 集合
      ## 1. 一个route 由一个id,uri 一组predicate(谓词 predicates) 一组filter(filters) 组成
      ## 2. id 是一个路由规则的ID, uri则表示需要路由的地址，集注册中心后则为服务名
      ## 3. predicates 则代表HTTP请求路由的匹配规则，gateway中集成了大量的实现(GatewayAutoConfiguration)
      ##   例如通过Header/Cookie/参数等 进行匹配
      ## 4. filter 则是对匹配通过后的Request再次进行一次更细粒度的过滤
        - id: nacos-consumer
          uri: lb://nacos-consumer
          predicates:
            - Path=/nacos-consumer/**
          filters:
            ## 转发路由跳过路径前缀 网关接收 -> /1/2/3 -> filter -> /2/3
            - StripPrefix=1
            ## 添加请求参数
            - AddRequestParameter=name,xz
            ## 熔断
            ## 限流
            - name: RequestRateLimiter
              args:
                keyResolver: "#{@hostKeyResolver}" # 缓存key 自定义生成策略
                redis-rate-limiter.replenishRate: 1 # 每秒生成令牌数 最小 1 也就是一秒内最少也能接受一个请求。
                redis-rate-limiter.burstCapacity: 1 # 令牌桶容量 最小 0 结合生成令牌的速率 也就是令牌桶最多1秒能接受 3 个请求
                redis-rate-limiter.requestedTokens: 1 # 一次请求所占用令牌数
  main:
    allow-bean-definition-overriding: true
  redis:
    port: 6379
    host: localhost
server:
  port: 8989
management: ## 暴露监控端点
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
